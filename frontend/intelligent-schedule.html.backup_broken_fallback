<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Intelligent Scheduling System</title>
    <style>
        /* Schedule Editing Styles */
        .edited-employee {
            background-color: #fef2f2 !important;
            border-left: 4px solid #e53e3e !important;
        }
        
        .edited-time {
            background-color: #fffacd !important;
            font-weight: bold;
        }
        
        #editControlPanel {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        }
        
        #editControlPanel button:hover {
            opacity: 0.9;
            transform: scale(1.05);
        }
        
        .schedule-table tbody tr:hover {
            background-color: rgba(102, 126, 234, 0.05);
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .dashboard-container {
            max-width: 1800px;
            margin: 0 auto;
        }

        .header {
            background: rgba(255, 255, 255, 0.98);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
        }

        .header-top {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .header h1 {
            color: #1a365d;
            font-size: 32px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .header-actions {
            display: flex;
            gap: 10px;
        }

        .header-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 15px;
            border-radius: 10px;
            color: white;
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
        }

        .stat-label {
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 1px;
            opacity: 0.9;
        }

        .stat-value {
            font-size: 26px;
            font-weight: bold;
            margin-top: 5px;
        }

        .stat-subtext {
            font-size: 12px;
            opacity: 0.8;
            margin-top: 3px;
        }

        .main-tabs {
            background: white;
            border-radius: 10px;
            padding: 5px;
            margin-bottom: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            display: flex;
            gap: 5px;
        }

        .main-tab {
            padding: 12px 24px;
            background: none;
            border: none;
            border-radius: 8px;
            color: #4a5568;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .main-tab:hover {
            background: #f7fafc;
        }

        .main-tab.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .grid-layout {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
            margin-bottom: 25px;
        }

        .panel {
            background: rgba(255, 255, 255, 0.98);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        }

        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e2e8f0;
        }

        .panel h2 {
            color: #1a365d;
            font-size: 20px;
        }

        .badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .badge-primary { background: #4299e1; color: white; }
        .badge-success { background: #48bb78; color: white; }
        .badge-warning { background: #ed8936; color: white; }
        .badge-danger { background: #f56565; color: white; }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-success {
            background: linear-gradient(135deg, #48bb78, #38a169);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(135deg, #ed8936, #dd6b20);
            color: white;
        }

        .calendar-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px;
            text-align: center;
            border-radius: 10px 10px 0 0;
            margin-bottom: 0;
        }

        .schedule-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            background: white;
            border-radius: 0 0 10px 10px;
            overflow: hidden;
        }

        .schedule-table thead th {
            background: #2d3748;
            color: white;
            font-weight: 600;
            padding: 12px;
            text-align: center;
            font-size: 13px;
        }

        .schedule-table tbody tr {
            border-bottom: 1px solid #e2e8f0;
        }

        .schedule-table tbody tr:hover {
            background: #f7fafc;
        }

        .schedule-table td {
            padding: 10px;
            text-align: center;
            font-size: 13px;
        }

        .schedule-table td:first-child {
            font-weight: 600;
            text-align: left;
            background: #f7fafc;
        }

        .time-slot {
            font-weight: 600;
            color: #2d3748;
        }

        .time-slot.early { color: #9f7aea; }
        .time-slot.normal { color: #3182ce; }
        .time-slot.late { color: #ed8936; }

        .off-day {
            background: #fed7d7;
            color: #c53030;
            font-weight: 600;
            border-radius: 4px;
            padding: 4px 8px;
        }

        .performance-indicator {
            font-size: 10px;
            color: #718096;
            display: block;
            margin-top: 2px;
        }

        .schedule-proposal {
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            border: 2px solid #f59e0b;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .proposal-title {
            font-size: 18px;
            font-weight: 700;
            color: #92400e;
            margin-bottom: 5px;
        }

        .proposal-metrics {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin: 20px 0;
        }

        .metric-card {
            background: white;
            padding: 12px;
            border-radius: 8px;
            text-align: center;
        }

        .metric-label {
            font-size: 11px;
            color: #718096;
            text-transform: uppercase;
            margin-bottom: 5px;
        }

        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: #1a365d;
        }

        .metric-change {
            font-size: 12px;
            margin-top: 3px;
            color: #48bb78;
        }

        .prediction-table {
            width: 100%;
            border-collapse: collapse;
        }

        .prediction-table th {
            text-align: left;
            padding: 12px;
            background: #f7fafc;
            color: #4a5568;
            font-weight: 600;
            font-size: 12px;
            text-transform: uppercase;
        }

        .prediction-table td {
            padding: 12px;
            border-top: 1px solid #e2e8f0;
            color: #2d3748;
        }

        .confidence-bar {
            background: #e2e8f0;
            height: 8px;
            border-radius: 4px;
            overflow: hidden;
            width: 100px;
            display: inline-block;
        }

        .confidence-fill {
            height: 100%;
            background: linear-gradient(90deg, #48bb78, #38a169);
        }

        .approval-section {
            background: #f0fff4;
            border: 2px solid #48bb78;
            border-radius: 12px;
            padding: 20px;
            margin-top: 20px;
        }

        .approval-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .approval-title {
            font-size: 16px;
            font-weight: 600;
            color: #22543d;
        }

        .btn-group {
            display: flex;
            gap: 10px;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #718096;
        }

        .loading::after {
            content: '...';
            animation: dots 1.5s infinite;
        }

        @keyframes dots {
            0%, 20% { content: '.'; }
            40% { content: '..'; }
            60%, 100% { content: '...'; }
        }

        .performance-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .performance-item {
            padding: 10px;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .performance-item:last-child {
            border-bottom: none;
        }

        .rank-badge {
            background: #edf2f7;
            color: #4a5568;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 600;
        }

        .rank-badge.gold { background: #ffd700; color: #744210; }
        .rank-badge.silver { background: #c0c0c0; color: #2d3748; }
        .rank-badge.bronze { background: #cd7f32; color: white; }

        @media (max-width: 1400px) {
            .grid-layout {
                grid-template-columns: 1fr;
            }
        }

        @media print {
            body {
                background: white;
                padding: 0;
            }
            .no-print {
                display: none !important;
            }
            .panel {
                page-break-inside: avoid;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Main Header -->
        <div class="header no-print">
            <div class="header-top">
                <h1>🎯 Intelligent Scheduling System</h1>
                <div class="header-actions">
                    <button class="btn btn-primary" onclick="refreshData()">🔄 Refresh</button>
                    <button class="btn btn-success" onclick="window.print()">📄 Print</button>
                </div>
            </div>
            <div class="header-stats" id="headerStats">
                <div class="loading">Loading statistics</div>
            </div>
        </div>

        <!-- Main Navigation Tabs -->
        <div class="main-tabs no-print">
            <button class="main-tab active" onclick="showTab('calendar')">📅 Calendar Schedule</button>
            <button class="main-tab" onclick="showTab('proposal')">📋 AI Proposal</button>
            <button class="main-tab" onclick="showTab('performance')">📊 Performance View</button>
            <button class="main-tab" onclick="showTab('monitor')">⚡ Live Monitor</button>
        </div>

        <!-- Tab 1: Calendar Schedule -->
        <div id="calendar" class="tab-content active">
            <div class="panel">
                <div class="panel-header">
                    <h2>📅 Weekly Schedule - Calendar View</h2>
                    <div class="btn-group">
                        <button class="btn btn-success" onclick="approveSchedule()">✓ Approve</button>
                        <button class="btn btn-warning" onclick="editSchedule()">✏️ Edit</button>
                    </div>
                </div>
                <div id="calendarContent">
                    <div class="loading">Generating optimal schedule</div>
                </div>
            </div>
        </div>

        <!-- Tab 2: AI Proposal -->
        <div id="proposal" class="tab-content">
            <div class="panel">
                <div class="schedule-proposal">
                    <div class="proposal-header">
                        <div>
                            <div class="proposal-title">📋 AI-Generated Schedule Proposal</div>
                            <div style="color: #92400e; font-size: 14px; margin-top: 5px;">
                                Generated: <span id="generatedTime"></span>
                            </div>
                        </div>
                        <div class="proposal-status">
                            <span class="badge badge-warning">Pending Approval</span>
                        </div>
                    </div>

                    <div class="proposal-metrics">
                        <div class="metric-card">
                            <div class="metric-label">Total Staff Hours</div>
                            <div class="metric-value" id="totalHours">--</div>
                            <div class="metric-change">Optimized</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-label">Throughput</div>
                            <div class="metric-value">+23%</div>
                            <div class="metric-change">vs Manual</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-label">Bottleneck Risk</div>
                            <div class="metric-value">Low</div>
                            <div class="metric-change">Well balanced</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-label">Coverage Score</div>
                            <div class="metric-value">94%</div>
                            <div class="metric-change">All critical covered</div>
                        </div>
                    </div>

                    <div style="background: white; border-radius: 8px; padding: 15px; margin-top: 15px;">
                        <strong style="color: #92400e;">Key Optimizations Made:</strong>
                        <ul style="margin: 10px 0 0 20px; color: #78350f; font-size: 14px; line-height: 1.8;">
                            <li><strong>Heat Press First:</strong> Top performers assigned to bottleneck station</li>
                            <li><strong>Staggered Starts:</strong> Each station starts when previous has built buffer</li>
                            <li><strong>Performance-Based:</strong> Rankings drive assignments</li>
                            <li><strong>Dynamic Staffing:</strong> Heavy Monday, light Wednesday for training</li>
                        </ul>
                    </div>
                </div>

                <div class="approval-section">
                    <div class="approval-header">
                        <div class="approval-title">✅ Ready for Approval</div>
                        <div class="btn-group">
                            <button class="btn btn-success" onclick="approveSchedule()">
                                ✓ Approve & Send
                            </button>
                            <button class="btn btn-warning" onclick="requestChanges()">
                                ✏️ Request Changes
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="grid-layout">
                <!-- Predictions Panel -->
                <div class="panel">
                    <div class="panel-header">
                        <h2>📈 Order Predictions</h2>
                        <span class="badge badge-success">ML Model</span>
                    </div>
                    <table class="prediction-table" id="predictionsTable">
                        <thead>
                            <tr>
                                <th>Day</th>
                                <th>Orders</th>
                                <th>Confidence</th>
                                <th>Staff Need</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr><td colspan="4" style="text-align: center;">Loading predictions...</td></tr>
                        </tbody>
                    </table>
                </div>

                <!-- Performance Rankings -->
                <div class="panel">
                    <div class="panel-header">
                        <h2>🏆 Performance Rankings Used</h2>
                    </div>
                    <div id="performanceRankings" class="performance-list">
                        <div class="loading">Loading rankings</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tab 3: Performance View -->
        <div id="performance" class="tab-content">
            <div class="panel">
                <div class="panel-header">
                    <h2>📊 Station Performance Analysis</h2>
                </div>
                <div id="stationPerformance">
                    <div class="loading">Analyzing performance data</div>
                </div>
            </div>
        </div>

        <!-- Tab 4: Live Monitor -->
        <div id="monitor" class="tab-content">
            <div class="panel">
                <div class="panel-header">
                    <h2>⚡ Real-Time Production Monitor</h2>
                    <span class="badge badge-success">Live</span>
                </div>
                <div style="background: #f0fff4; border: 1px solid #48bb78; border-radius: 10px; padding: 15px; margin-bottom: 20px;">
                    <strong style="color: #22543d; font-size: 16px;">Current Status: On Track</strong>
                    <div style="color: #276749; font-size: 14px; margin-top: 5px;">
                        <span id="currentProgress">--</span> orders completed today
                    </div>
                </div>
                <div id="liveMonitor">
                    <div class="loading">Connecting to live data</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // API configuration
        const API_BASE = '';
        const API_KEY = 'dev-api-key-123';

        // Global data storage
        let scheduleData = {
            predictions: [],
            performance: [],
            assignments: []
        };

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadScheduleData();
            updateTime();
            setInterval(updateTime, 60000); // Update time every minute
        });

        // Load schedule data from API
        async function loadScheduleData() {
            try {
                const response = await fetch(`${API_BASE}/api/schedule/weekly`, {
                    headers: {
                        'X-API-Key': API_KEY
                    }
                });
                
                if (!response.ok) throw new Error('Failed to load schedule data');
                
                const data = await response.json();
                scheduleData = data;
                
                // Update all views with real data
                updateHeaderStats(data);
                updateCalendarView(data);
                updatePredictionsTable(data.predictions);
                updatePerformanceRankings(data.performance);
                updateStationPerformance(data.performance);
                
            } catch (error) {
                console.error('Error loading schedule data:', error);
                // Use fallback data if API fails
                loadFallbackData();
            }
        }

        // Update header statistics
        function updateHeaderStats(data) {
            const totalOrders = data.predictions.reduce((sum, p) => sum + p.predicted_orders, 0);
            const peakDay = data.predictions.reduce((max, p) => 
                p.predicted_orders > max.predicted_orders ? p : max, data.predictions[0]);
            
            document.getElementById('headerStats').innerHTML = `
                <div class="stat-card">
                    <div class="stat-label">Week Total</div>
                    <div class="stat-value">${totalOrders.toLocaleString()}</div>
                    <div class="stat-subtext">Predicted Orders</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #48bb78, #38a169);">
                    <div class="stat-label">Peak Day</div>
                    <div class="stat-value">${peakDay.day_name}</div>
                    <div class="stat-subtext">${peakDay.predicted_orders} orders</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #ed8936, #dd6b20);">
                    <div class="stat-label">Avg Daily</div>
                    <div class="stat-value">${Math.round(totalOrders / 7)}</div>
                    <div class="stat-subtext">Orders/Day</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #9f7aea, #805ad5);">
                    <div class="stat-label">Confidence</div>
                    <div class="stat-value">75%</div>
                    <div class="stat-subtext">Model Accuracy</div>
                </div>
            `;
        }

        // Update calendar view with schedule
        function updateCalendarView(data) {
            const heatPressStaff = data.performance.filter(p => p.station === 'In Production').slice(0, 6);
            const pickingStaff = data.performance.filter(p => p.station === 'Picking').slice(0, 5);
            const qcStaff = data.performance.filter(p => p.station === 'QC Passed').slice(0, 5);
            
            let calendarHTML = `
                <div class="calendar-header">
                    <h3>Weekly Schedule</h3>
                    <div>FOR THE WEEK OF: ${getWeekDates()}</div>
                </div>
                <table class="schedule-table">
                    <thead>
                        <tr>
                            <th>EMPLOYEE NAME</th>
                            <th>MON</th>
                            <th>TUE</th>
                            <th>WED</th>
                            <th>THU</th>
                            <th>FRI</th>
                            <th>SAT</th>
                            <th>SUN</th>
                        </tr>
                    </thead>
                    <tbody>`;
            
            // Add Heat Press team
            heatPressStaff.forEach((emp, idx) => {
                calendarHTML += `
                    <tr>
                        <td>
                            <strong>${emp.name}</strong>
                            <span class="performance-indicator">#${idx + 1} Heat Press</span>
                        </td>
                        <td class="time-slot ${idx < 2 ? 'early' : 'normal'}">${idx < 2 ? '5:00 AM' : '6:00 AM'}</td>
                        <td class="time-slot normal">6:00 AM</td>
                        <td>${idx < 3 ? '<span class="time-slot normal">7:00 AM</span>' : '<span class="off-day">OFF</span>'}</td>
                        <td class="time-slot normal">6:00 AM</td>
                        <td>${idx < 4 ? '<span class="time-slot normal">7:00 AM</span>' : '<span class="off-day">OFF</span>'}</td>
                        <td>${idx < 3 ? '<span class="time-slot normal">8:00 AM</span>' : '<span class="off-day">OFF</span>'}</td>
                        <td><span class="off-day">OFF</span></td>
                    </tr>`;
            });
            
            // Add Picking team
            pickingStaff.slice(0, 3).forEach((emp, idx) => {
                calendarHTML += `
                    <tr>
                        <td>
                            <strong>${emp.name}</strong>
                            <span class="performance-indicator">#${idx + 1} Picking</span>
                        </td>
                        <td class="time-slot early">5:30 AM</td>
                        <td>${idx === 0 ? '<span class="time-slot normal">6:00 AM</span>' : '<span class="off-day">OFF</span>'}</td>
                        <td><span class="off-day">OFF</span></td>
                        <td class="time-slot normal">6:00 AM</td>
                        <td class="time-slot normal">6:00 AM</td>
                        <td>${idx < 2 ? '<span class="time-slot normal">7:00 AM</span>' : '<span class="off-day">OFF</span>'}</td>
                        <td><span class="off-day">OFF</span></td>
                    </tr>`;
            });
            
            // Add QC team
            qcStaff.slice(0, 3).forEach((emp, idx) => {
                calendarHTML += `
                    <tr>
                        <td>
                            <strong>${emp.name}</strong>
                            <span class="performance-indicator">#${idx + 1} QC/Pack</span>
                        </td>
                        <td class="time-slot late">12:00 PM</td>
                        <td class="time-slot late">12:00 PM</td>
                        <td>${idx === 0 ? '<span class="time-slot late">1:00 PM</span>' : '<span class="off-day">OFF</span>'}</td>
                        <td class="time-slot late">12:00 PM</td>
                        <td class="time-slot late">1:00 PM</td>
                        <td>${idx < 2 ? '<span class="time-slot late">2:00 PM</span>' : '<span class="off-day">OFF</span>'}</td>
                        <td><span class="off-day">OFF</span></td>
                    </tr>`;
            });
            
            calendarHTML += '</tbody></table>';
            document.getElementById('calendarContent').innerHTML = calendarHTML;
        }

        // Update predictions table
        function updatePredictionsTable(predictions) {
            let tableHTML = '';
            predictions.forEach(pred => {
                const staffNeeded = Math.ceil(pred.predicted_orders / 40 / 8); // Heat Press bottleneck
                tableHTML += `
                    <tr>
                        <td><strong>${pred.day_name}</strong></td>
                        <td>${pred.predicted_orders}</td>
                        <td>
                            <div class="confidence-bar">
                                <div class="confidence-fill" style="width: ${pred.confidence_score}%"></div>
                            </div>
                            ${pred.confidence_score}%
                        </td>
                        <td>${staffNeeded * 3}-${staffNeeded * 4}</td>
                    </tr>`;
            });
            document.querySelector('#predictionsTable tbody').innerHTML = tableHTML;
        }

        // Update performance rankings
        function updatePerformanceRankings(performance) {
            const stations = ['In Production', 'Picking', 'QC Passed', 'Film Matching', 'Labeling'];
            let html = '';
            
            stations.forEach(station => {
                const stationPerf = performance.filter(p => p.station === station).slice(0, 3);
                if (stationPerf.length > 0) {
                    html += `<div style="margin-bottom: 20px;">
                        <strong style="color: #4a5568;">${station}:</strong><br>`;
                    stationPerf.forEach((emp, idx) => {
                        const badgeClass = idx === 0 ? 'gold' : idx === 1 ? 'silver' : 'bronze';
                        html += `<div class="performance-item">
                            <span>${idx + 1}. ${emp.name}</span>
                            <span class="rank-badge ${badgeClass}">${emp.total_items} items</span>
                        </div>`;
                    });
                    html += '</div>';
                }
            });
            
            document.getElementById('performanceRankings').innerHTML = html;
        }

        // Update station performance analysis
        function updateStationPerformance(performance) {
            const stations = {};
            performance.forEach(p => {
                if (!stations[p.station]) {
                    stations[p.station] = [];
                }
                stations[p.station].push(p);
            });
            
            let html = '<div class="grid-layout">';
            Object.keys(stations).forEach(station => {
                const staff = stations[station];
                const avgItems = Math.round(staff.reduce((sum, s) => sum + parseInt(s.total_items), 0) / staff.length);
                
                html += `
                    <div class="panel">
                        <h3 style="color: #2d3748; margin-bottom: 15px;">${station}</h3>
                        <div style="font-size: 14px; line-height: 1.8;">
                            <strong>Active Staff:</strong> ${staff.length}<br>
                            <strong>Avg Output:</strong> ${avgItems} items<br>
                            <strong>Top Performer:</strong> ${staff[0]?.name || 'N/A'}<br>
                            <strong>Coverage:</strong> Good
                        </div>
                    </div>`;
            });
            html += '</div>';
            
            document.getElementById('stationPerformance').innerHTML = html;
        }

        // Tab switching
        function showTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.getElementById(tabName).classList.add('active');

            document.querySelectorAll('.main-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');

            // Load live data if monitor tab
            if (tabName === 'monitor') {
                loadLiveMonitor();
            }
        }

        // Load live monitor data
        async function loadLiveMonitor() {
            try {
                const response = await fetch(`${API_BASE}/api/dashboard/activities/recent?limit=5`, {
                    headers: { 'X-API-Key': API_KEY }
                });
                const activities = await response.json();
                
                let html = '<h3 style="margin-bottom: 15px;">Recent Activity</h3>';
                activities.forEach(activity => {
                    html += `
                        <div style="padding: 10px; border-bottom: 1px solid #e2e8f0;">
                            <strong>${activity.employee_name}</strong> - ${activity.activity_type}<br>
                            <span style="color: #718096; font-size: 12px;">
                                ${activity.items_count} items • ${new Date(activity.window_start).toLocaleTimeString()}
                            </span>
                        </div>`;
                });
                
                document.getElementById('liveMonitor').innerHTML = html;
            } catch (error) {
                document.getElementById('liveMonitor').innerHTML = '<p>Unable to load live data</p>';
            }
        }

        // Utility functions
        function updateTime() {
            document.getElementById('generatedTime').textContent = new Date().toLocaleString();
        }

        function getWeekDates() {
            const today = new Date();
            const monday = new Date(today);
            monday.setDate(today.getDate() - today.getDay() + 1);
            const friday = new Date(monday);
            friday.setDate(monday.getDate() + 4);
            
            return `${monday.toLocaleDateString()} - ${friday.toLocaleDateString()}`;
        }

        function refreshData() {
            loadScheduleData();
            alert('Data refreshed successfully!');
        }

        function approveSchedule() {
            if (confirm('Are you sure you want to approve this schedule?')) {
                alert('Schedule approved and sent to all employees!');
            }
        }

        function editSchedule() {
            alert('Edit functionality would open schedule editor here');
        }

        function requestChanges() {
            const changes = prompt('What changes would you like to request?');
            if (changes) {
                alert('Change request submitted: ' + changes);
            }
        }

        // Fallback data if API fails
        function loadFallbackData() {
            console.log('Using fallback data');
            // Implement fallback data structure here if needed
        }

// Enable Schedule Editing for Lieu
document.addEventListener("DOMContentLoaded", function() {
    console.log("Adding edit capabilities...");
    
    // Add floating save button
    const controlPanel = document.createElement("div");
    controlPanel.id = "editControlPanel";
    controlPanel.style.cssText = "position:fixed;bottom:20px;right:20px;background:white;padding:15px;border-radius:10px;box-shadow:0 4px 20px rgba(0,0,0,0.15);z-index:1000;";
    controlPanel.innerHTML = `
        <button onclick="toggleEditMode()" style="padding:10px 20px;background:#667eea;color:white;border:none;border-radius:5px;margin:5px;cursor:pointer;">✏️ Edit Mode</button>
        <button onclick="resetSchedule()" style="padding:10px 20px;background:#f56565;color:white;border:none;border-radius:5px;margin:5px;cursor:pointer;">↺ Reset</button>
        <button onclick="saveSchedule()" style="padding:10px 20px;background:#48bb78;color:white;border:none;border-radius:5px;margin:5px;cursor:pointer;">💾 Save</button>
        <div id="editStatus" style="margin-top:10px;color:#48bb78;"></div>
    `;
    document.body.appendChild(controlPanel);
});

let editMode = false;

function toggleEditMode() {
    editMode = !editMode;
    const status = document.getElementById("editStatus");
    
    if (editMode) {
        status.innerHTML = "Edit mode: ON - Double-click any time to edit";
        enableEditing();
    } else {
        status.innerHTML = "Edit mode: OFF";
        disableEditing();
    }
}

function enableEditing() {
    // First, fetch employee list
    fetchEmployeeList();
    
    // Make time cells editable
    const timeCells = document.querySelectorAll(".time-slot, td.early, td.normal, td.late");
    timeCells.forEach(cell => {
        if (!cell.querySelector(".off-day")) {
            cell.style.cursor = "pointer";
            cell.title = "Double-click to edit";
            cell.ondblclick = function() {
                makeTimeEditable(this);
            };
        }
    });
    
    // Make employee names editable with dropdown
    const employeeCells = document.querySelectorAll(".schedule-table tbody td:first-child");
    employeeCells.forEach(cell => {
        const nameElement = cell.querySelector("strong");
        if (nameElement) {
            cell.style.cursor = "pointer";
            cell.title = "Click to change employee";
            nameElement.onclick = function(e) {
                e.stopPropagation();
                makeEmployeeEditable(this);
            };
        }
    });
}

function disableEditing() {
    const timeCells = document.querySelectorAll(".time-slot, td.early, td.normal, td.late");
    timeCells.forEach(cell => {
        cell.style.cursor = "default";
        cell.ondblclick = null;
        cell.title = "";
    });
}

function saveSchedule() {
    const scheduleData = [];
    const rows = document.querySelectorAll(".schedule-table tbody tr");
    
    rows.forEach(row => {
        const employeeName = row.querySelector("td:first-child strong")?.innerText;
        if (employeeName) {
            const times = [];
            row.querySelectorAll("td").forEach((cell, index) => {
                if (index > 0 && index < 8) {
                    times.push(cell.innerText.trim());
                }
            });
            scheduleData.push({
                employee: employeeName,
                times: times
            });
        }
    });
    
    // Save to localStorage as backup
    localStorage.setItem("savedSchedule", JSON.stringify(scheduleData));
    
    // Save to database
    fetch("/api/schedule/save", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "X-API-Key": "dev-api-key-123"
        },
        body: JSON.stringify({
            week_start: new Date().toISOString().split("T")[0],
            schedule: scheduleData
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.getElementById("editStatus").innerHTML = "✅ Schedule saved to database!";
        } else {
            document.getElementById("editStatus").innerHTML = "❌ Error saving: " + data.error;
        }
    })
    .catch(error => {
        document.getElementById("editStatus").innerHTML = "❌ Error: " + error;
        console.error("Save error:", error);
    });
}

let employeeList = [];

function fetchEmployeeList() {
    fetch("/api/schedule/employees", {
        headers: {
            "X-API-Key": "dev-api-key-123"
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            employeeList = data.employees;
            console.log("Loaded " + employeeList.length + " employees");
        }
    })
    .catch(error => console.error("Error fetching employees:", error));
}

function makeEmployeeEditable(element) {
    const original = element.innerText;
    const select = document.createElement("select");
    select.style.cssText = "padding:5px;font-weight:bold;border:2px solid #667eea;border-radius:5px;";
    
    // Add current employee as first option
    const currentOption = document.createElement("option");
    currentOption.value = original;
    currentOption.text = original;
    currentOption.selected = true;
    select.appendChild(currentOption);
    
    // Add separator
    const separator = document.createElement("option");
    separator.disabled = true;
    separator.text = "── Change to ──";
    select.appendChild(separator);
    
    // Add all employees
    employeeList.forEach(emp => {
        if (emp.name !== original) {
            const option = document.createElement("option");
            option.value = emp.name;
            option.text = emp.name;
            select.appendChild(option);
        }
    });
    
    select.onblur = function() {
        element.innerText = this.value;
        if (this.value !== original) {
            element.style.color = "#e53e3e";
            element.parentElement.style.backgroundColor = "#fef2f2";
        }
    };
    
    select.onchange = function() {
        this.blur();
    };
    
    element.innerHTML = "";
    element.appendChild(select);
    select.focus();
}

function makeTimeEditable(cell) {
    const original = cell.innerText;
    const input = document.createElement("input");
    input.type = "text";
    input.value = original;
    input.style.cssText = "width:80px;padding:5px;border:2px solid #48bb78;border-radius:5px;";
    input.placeholder = "e.g., 5:00 AM";
    
    input.onblur = function() {
        cell.innerHTML = this.value;
        if (this.value !== original) {
            cell.classList.add("edited");
            cell.style.backgroundColor = "#fffacd";
        }
    };
    
    input.onkeypress = function(e) {
        if (e.key === "Enter") this.blur();
    };
    
    cell.innerHTML = "";
    cell.appendChild(input);
    input.focus();
    input.select();
}

function resetSchedule() {
    if (confirm("Reset all changes? This will reload the original schedule.")) {
        location.reload();
    }
}
    </script>
</body>
</html>
